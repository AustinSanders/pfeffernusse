# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pfeffernusse.models.base_model_ import Model
from pfeffernusse import util


class ISD200OpticalDistortion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coefficients: List[float]=None, key: str=None):  # noqa: E501
        """ISD200OpticalDistortion - a model defined in OpenAPI

        :param coefficients: The coefficients of this ISD200OpticalDistortion.  # noqa: E501
        :type coefficients: List[float]
        :param key: The key of this ISD200OpticalDistortion.  # noqa: E501
        :type key: str
        """
        self.openapi_types = {
            'coefficients': List[float],
            'key': str
        }

        self.attribute_map = {
            'coefficients': 'coefficients',
            'key': 'key'
        }

        self._coefficients = coefficients
        self._key = key

    @classmethod
    def from_dict(cls, dikt) -> 'ISD200OpticalDistortion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ISD200_optical_distortion of this ISD200OpticalDistortion.  # noqa: E501
        :rtype: ISD200OpticalDistortion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coefficients(self) -> List[float]:
        """Gets the coefficients of this ISD200OpticalDistortion.


        :return: The coefficients of this ISD200OpticalDistortion.
        :rtype: List[float]
        """
        return self._coefficients

    @coefficients.setter
    def coefficients(self, coefficients: List[float]):
        """Sets the coefficients of this ISD200OpticalDistortion.


        :param coefficients: The coefficients of this ISD200OpticalDistortion.
        :type coefficients: List[float]
        """

        self._coefficients = coefficients

    @property
    def key(self) -> str:
        """Gets the key of this ISD200OpticalDistortion.

        Key into LUT to determine equation to use.  # noqa: E501

        :return: The key of this ISD200OpticalDistortion.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ISD200OpticalDistortion.

        Key into LUT to determine equation to use.  # noqa: E501

        :param key: The key of this ISD200OpticalDistortion.
        :type key: str
        """

        self._key = key
